using System;
class AllGoals
{
    private List<AllGoals> allGoals = new List<AllGoals>();
    private int totalPoints;
    private string level;
    private string _fileName;
    public string GetFileName()
    {
        return _fileName;
    }
    public void SetFileName(string fileName)
    {
        _fileName = fileName;}
        public void addGoal(AllGoals _goal){allGoals.Add(_goal);
    }
    public int getTotalPoints()
    {
        return totalPoints;
    }
    public int getLevel()
    {
        int level = totalPoints / 1000;
        if (level >= 1){level = $"Level {level}";
        }
        else{level = "Beginner";
        }
        return level;
    }
    public static int GetLevel(int points)
    {
        for (int level = 0; level <= 100;)
        {
            return level;
        }
        return 100;
    }
    public void DisplayPoints(int totalPoints)
    {
        Console.WriteLine($"Total Points: {totalPoints}");
    }
    public void DisplayLevel(string level)
    {
        Console.WriteLine($"Status: {level}");
    }
    public void DisplayGoals()
    {
        if (allGoals.Count() == 0)
        {
            Console.WriteLine("No goals have been created or loaded.");
            return;
        }
        Console.WriteLine("The goals are:");
        foreach (Goal goal in allGoals)
        {
            Console.WriteLine($"{allGoals.IndexOf(goal) + 1}. {goal.ToString()}");
        }
        Console.WriteLine();
        }
        public void SaveGoals()
        {
            if (allGoals.Count() == 0)
            {
                Console.WriteLine("There are no goals to save.");
                Console.WriteLine();
                return;
            }
            Console.Write("Do you want to LOAD a file before you SAVE (y/n)? ");
            string userInput = Console.ReadLine();
            if (userInput == "y" || userInput == "yes")
            {
                LoadGoals();
            }
            Console.WriteLine("Please enter the FileName you want to SAVE: ");
            _fileName = Console.ReadLine();
            string fileToSave = _fileName;
            List<string> saveGoals = new List<string>();
            // Save Points
            saveGoals.Add(totalPoints.ToString());
            // Convert to CSV and Save Goals
            foreach (AllGoals goal in allGoals)
            {
                saveGoals.Add(goal.ToCSVRecord());
            }
            SaveLoadCSV.SaveToCSV(saveGoals, fileToSave);
        }
        SaveLoadCVS.sace
    private string ToCSVRecord()
    {
        throw new NotImplementedException();
    }

    public void LoadGoals()
        {
            List<string> fileGoals;Console.WriteLine("Please enter the FileName you want to LOAD: ");
            _fileName = Console.ReadLine();
            fileGoals = SaveLoadCSV.LoadFromCSV(_fileName);
            Goal goal = null;
            foreach (string goalInFile in fileGoals)
            {
                string[] goalParts = goalInFile.Split('|');
                int goalType = int.Parse(goalParts[0]);
                if (goalType == 1)
                {
                    goal = new SimpleGoal(goalParts[1], goalParts[2],int.Parse(goalParts[3]), bool.Parse(goalParts[4]));
                }
                else if (goalType == 2)
                {
                    goal = new EternalGoal(goalParts[1], goalParts[2],int.Parse(goalParts[3]), int.Parse(goalParts[4]), bool.Parse(goalParts[5]));
                    }
                    else if (goalType == 3)
                    {
                        goal = new CheckListGoal(goalParts[1], goalParts[2],int.Parse(goalParts[3]), int.Parse(goalParts[4]), int.Parse(goalParts[5]),int.Parse(goalParts[6]), bool.Parse(goalParts[7]));
                    }
                    else
                    {
                        totalPoints = goalType;
                    }
                    if (goal != null && allGoals.Contains(goal) == false)
                    {
                        allGoals.Add(goal);
                    }
                }
            }
            public void DisplayGoalRecordEvent()
            {
                Console.WriteLine("The Goals are:");
                foreach (AllGoals goal in allGoals)
                {
                    Console.WriteLine(string.Format($"{allGoals.IndexOf(goal) + 1}.[{((goal.GetGoalStatus() == false) ? " " : "x")}] {goal.GetGoalName()}"));
                }
                Console.Write("Which goal did you complete? ");
                int recordEvent = int.Parse(Console.ReadLine()) - 1;
                Console.Clear();
                bool status = allGoals[recordEvent].GetGoalStatus();
                if (status == false)
                {
                    allGoals[recordEvent].RecordEvent();
                    totalPoints += allGoals[recordEvent].GetGoalPoints();
                    Console.WriteLine(string.Format($"You now have {totalPoints.ToString()}points!"));
                    Console.WriteLine();
                    Thread.Sleep(5000);
                    Console.Clear();
                }
                else
                {
                    Console.WriteLine("That goal is already Completed!");
                    Console.WriteLine();
                    return;
                }
            }

    private void RecordEvent()
    {
        throw new NotImplementedException();
    }
}

internal class CheckListGoal
{
    private string v1;
    private string v2;
    private int v3;
    private int v4;
    private int v5;
    private int v6;
    private bool v7;

    public CheckListGoal(string v1, string v2, int v3, int v4, int v5, int v6, bool v7)
    {
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
        this.v4 = v4;
        this.v5 = v5;
        this.v6 = v6;
        this.v7 = v7;
    }
}

internal class EternalGoal
{
    private string v1;
    private string v2;
    private int v3;
    private int v4;
    private bool v5;

    public EternalGoal(string v1, string v2, int v3, int v4, bool v5)
    {
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
        this.v4 = v4;
        this.v5 = v5;
    }
}

internal class SimpleGoal
{
    private string v1;
    private string v2;
    private int v3;
    private bool v4;

    public SimpleGoal(string v1, string v2, int v3, bool v4)
    {
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
        this.v4 = v4;
    }
}
